// Code generated by MockGen. DO NOT EDIT.
// Source: internal/connectiontracker/firewall_test.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIptablesMock is a mock of IptablesMock interface.
type MockIptablesMock struct {
	ctrl     *gomock.Controller
	recorder *MockIptablesMockMockRecorder
}

// MockIptablesMockMockRecorder is the mock recorder for MockIptablesMock.
type MockIptablesMockMockRecorder struct {
	mock *MockIptablesMock
}

// NewMockIptablesMock creates a new mock instance.
func NewMockIptablesMock(ctrl *gomock.Controller) *MockIptablesMock {
	mock := &MockIptablesMock{ctrl: ctrl}
	mock.recorder = &MockIptablesMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIptablesMock) EXPECT() *MockIptablesMockMockRecorder {
	return m.recorder
}

// AppendUnique mocks base method.
func (m *MockIptablesMock) AppendUnique(table, chain string, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, chain}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendUnique", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendUnique indicates an expected call of AppendUnique.
func (mr *MockIptablesMockMockRecorder) AppendUnique(table, chain interface{}, rulespec ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, chain}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUnique", reflect.TypeOf((*MockIptablesMock)(nil).AppendUnique), varargs...)
}

// ChainExists mocks base method.
func (m *MockIptablesMock) ChainExists(table, chain string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainExists", table, chain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainExists indicates an expected call of ChainExists.
func (mr *MockIptablesMockMockRecorder) ChainExists(table, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainExists", reflect.TypeOf((*MockIptablesMock)(nil).ChainExists), table, chain)
}

// ClearAndDeleteChain mocks base method.
func (m *MockIptablesMock) ClearAndDeleteChain(table, chain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAndDeleteChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAndDeleteChain indicates an expected call of ClearAndDeleteChain.
func (mr *MockIptablesMockMockRecorder) ClearAndDeleteChain(table, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAndDeleteChain", reflect.TypeOf((*MockIptablesMock)(nil).ClearAndDeleteChain), table, chain)
}

// DeleteIfExists mocks base method.
func (m *MockIptablesMock) DeleteIfExists(table, chain string, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, chain}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIfExists", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIfExists indicates an expected call of DeleteIfExists.
func (mr *MockIptablesMockMockRecorder) DeleteIfExists(table, chain interface{}, rulespec ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, chain}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIfExists", reflect.TypeOf((*MockIptablesMock)(nil).DeleteIfExists), varargs...)
}

// Insert mocks base method.
func (m *MockIptablesMock) Insert(table, chain string, pos int, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, chain, pos}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIptablesMockMockRecorder) Insert(table, chain, pos interface{}, rulespec ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, chain, pos}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIptablesMock)(nil).Insert), varargs...)
}

// NewChain mocks base method.
func (m *MockIptablesMock) NewChain(table, chain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChain indicates an expected call of NewChain.
func (mr *MockIptablesMockMockRecorder) NewChain(table, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChain", reflect.TypeOf((*MockIptablesMock)(nil).NewChain), table, chain)
}
